// Extract Readiness2 Nucleus Selection
let readiness2Nucleus = [];
document.querySelectorAll("#readiness2_nucleus_selected .selected-item").forEach(item => {
    let value = item.textContent.replace("âœ–", "").trim(); // Remove the "X" symbol

    if (value.startsWith("SUBJECT - ")) {
        readiness2Nucleus.push({ "subject_id": value.replace("SUBJECT - ", "") });
    } else if (value.startsWith("METADATA - ")) {
        readiness2Nucleus.push({ "fqti": value.replace("METADATA - ", "") });
    } else {
        readiness2Nucleus.push({ "fqti": value });
    }
});


// Extract Readiness2 Metadata Entries
let readiness2Metadata = Array.from(document.querySelectorAll("#readiness2_metadata_forms .metadata-form")).map(form => ({
    script_execution: form.querySelector("textarea").value.trim(),
    role: form.querySelector("input:nth-of-type(1)").value.trim(),
    db: form.querySelector("input:nth-of-type(2)").value.trim(),
    schema: form.querySelector("input:nth-of-type(3)").value.trim(),
    grant_access: form.querySelector("input[type='checkbox']").checked
}));



// Extract Readiness2 Scheduler Entries
let readiness2Scheduler = Array.from(document.querySelectorAll("#readiness2_scheduler_forms .scheduler-form")).map(form => ({
    type: form.querySelector("input[name='scheduler_type']:checked").value,
    time: form.querySelector("input[type='time']").value
}));


let formData = {
    ...
    readiness2: {
        nucleus: readiness2Nucleus,
        metadata: readiness2Metadata,
        scheduler: readiness2Scheduler
    }
};



// Readiness2 - Nucleus Selection Processing
if (formData.readiness2.nucleus) {
    formData.readiness2.nucleus.forEach((entry, index) => {
        let methodName = entry.subject_id ? "MAIN_SUBJECT_READY" : "TABLE_READY_CHECK";
        let argumentsData = entry.subject_id ? { "subject_id": entry.subject_id } : { "fqti": entry.fqti };

        apiCalls.push(callApi(
            `Readiness2 - Nucleus ${index + 1}`,
            apiUrls.other_modules,
            {
                SUBJECT_ID: formData.subject_id,
                STEP_NUMBER: 10,
                METHOD_NAME: methodName,
                SUBJECT_ARGUMENTS: argumentsData
            },
            updateProgress
        ));
    });
}

// Readiness2 - Metadata Entries Processing
if (formData.readiness2.metadata) {
    formData.readiness2.metadata.forEach((entry, index) => {
        apiCalls.push(callApi(
            `Readiness2 - Metadata ${index + 1}`,
            apiUrls.other_modules,
            {
                SUBJECT_ID: formData.subject_id,
                STEP_NUMBER: 10,
                METHOD_NAME: "TABLE_READY_CHECK",
                SUBJECT_ARGUMENTS: entry
            },
            updateProgress
        ));
    });
}

// Readiness2 - Scheduler Entries Processing
if (formData.readiness2.scheduler) {
    formData.readiness2.scheduler.forEach((entry, index) => {
        apiCalls.push(callApi(
            `Readiness2 - Scheduler ${index + 1}`,
            apiUrls.other_modules,
            {
                SUBJECT_ID: formData.subject_id,
                STEP_NUMBER: 10,
                METHOD_NAME: "TABLE_READY_CHECK",
                SUBJECT_ARGUMENTS: entry
            },
            updateProgress
        ));
    });
}

